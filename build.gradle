buildscript {
    ext {
        kotlinVersion = '1.3.72'
        servletVersion = '2.5'
        springBootVersion = '2.1.4.RELEASE'
        springCloudVersion = 'Finchley.RELEASE'
        springCloudAwsVersion = '2.0.1.RELEASE'
        awsSdkVersion = '1.11.704'
        jacksonJsonVersion = '1.11.704'
        geolatteVersion= "1.3.0"
        vividsolutionsVersion = "1.13"
        exposedVersion = '0.17.7'
        kotlinxCoroutineVersion = '1.2.1'
        springKotlinCoroutineVersion = '0.3.7'
        junitJupiterVersion = '5.4.2'
        junitPlatformVersion = '1.5.2'
        poiVersion = '4.1.0'
        hikariCpVersion = "3.4.1"
        javaJwtVersion = "0.9.1"
        guavaVersion = '28.1-jre'
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        // Spring Boot 사용 시 executable jar나 war 패키징, 앱 실행, spring-boot-dependencies의 dependency management 기능 등을 사용할 수 있게 하는 플러그인
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7")
    }
}

plugins {
    id 'java'
}

allprojects {
    group 'site.jonus.savog'
    version '1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://repo.spring.io/milestone"
            allowInsecureProtocol true
        }
        maven {
            url "https://repo.osgeo.org/repository/release/"
            allowInsecureProtocol true
        }
        maven {
            url "https://dl.bintray.com/kotlin/exposed"
            allowInsecureProtocol true
        }
        maven {
            url "https://dl.bintray.com/0mok/spring-kotlin-coroutine"
            allowInsecureProtocol true
        }
    }

    // kotlin 설정
    dependencies {
        api("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
        api("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}")
        api("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
        api("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
        api("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxCoroutineVersion}")
        api("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinxCoroutineVersion}")
        api("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        runtimeOnly 'mysql:mysql-connector-java'

        // test
        testApi("org.springframework:spring-mock:2.0.8")
        testApi("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        testApi "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
        testApi "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testApi "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
//        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        testApi "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
        testApi "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
            mavenBom "com.amazonaws:aws-java-sdk-bom:${awsSdkVersion}"
        }

        dependencies {
            dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
            dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}")
            dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
            dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
        }
    }


    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict", "-Xuse-experimental=kotlin.Experimental"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict", "-Xuse-experimental=kotlin.Experimental"]
            jvmTarget = "1.8"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            // failFast = true
            // showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    allOpen {
        annotation 'javax.persistence.Entity'
        annotation 'javax.persistence.Embeddable'
    }

    // ktlint 관련 설정
    configurations {
        ktlint
    }

    dependencies {
        ktlint "com.github.shyiko:ktlint:0.31.0"
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "src/**/*.kt"
    }
    check.dependsOn ktlint

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "-F", "src/**/*.kt"
    }
}